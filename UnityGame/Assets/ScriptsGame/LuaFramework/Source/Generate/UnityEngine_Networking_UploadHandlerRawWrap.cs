//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Networking_UploadHandlerRawWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Networking.UploadHandlerRaw), typeof(UnityEngine.Networking.UploadHandler),"UploadHandlerRaw");
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateUnityEngine_Networking_UploadHandlerRaw);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Networking_UploadHandlerRaw(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				UnityEngine.Networking.UploadHandlerRaw obj = new UnityEngine.Networking.UploadHandlerRaw(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<Unity.Collections.NativeArray<byte>.ReadOnly>(L, 1))
			{
				Unity.Collections.NativeArray<byte>.ReadOnly arg0 = StackTraits<Unity.Collections.NativeArray<byte>.ReadOnly>.To(L, 1);
				UnityEngine.Networking.UploadHandlerRaw obj = new UnityEngine.Networking.UploadHandlerRaw(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				Unity.Collections.NativeArray<byte> arg0 = StackTraits<Unity.Collections.NativeArray<byte>>.Check(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				UnityEngine.Networking.UploadHandlerRaw obj = new UnityEngine.Networking.UploadHandlerRaw(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Networking.UploadHandlerRaw.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Networking.UploadHandlerRaw obj = (UnityEngine.Networking.UploadHandlerRaw)ToLua.CheckObject(L, 1, typeof(UnityEngine.Networking.UploadHandlerRaw));
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

