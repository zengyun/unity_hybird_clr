//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Physics2DWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Physics2D), typeof(System.Object),"Physics2D");
		L.RegFunction("Simulate", Simulate);
		L.RegFunction("SyncTransforms", SyncTransforms);
		L.RegFunction("IgnoreCollision", IgnoreCollision);
		L.RegFunction("GetIgnoreCollision", GetIgnoreCollision);
		L.RegFunction("IgnoreLayerCollision", IgnoreLayerCollision);
		L.RegFunction("GetIgnoreLayerCollision", GetIgnoreLayerCollision);
		L.RegFunction("SetLayerCollisionMask", SetLayerCollisionMask);
		L.RegFunction("GetLayerCollisionMask", GetLayerCollisionMask);
		L.RegFunction("IsTouching", IsTouching);
		L.RegFunction("IsTouchingLayers", IsTouchingLayers);
		L.RegFunction("Distance", Distance);
		L.RegFunction("ClosestPoint", ClosestPoint);
		L.RegFunction("Linecast", Linecast);
		L.RegFunction("LinecastAll", LinecastAll);
		L.RegFunction("LinecastNonAlloc", LinecastNonAlloc);
		L.RegFunction("Raycast", Raycast);
		L.RegFunction("RaycastNonAlloc", RaycastNonAlloc);
		L.RegFunction("RaycastAll", RaycastAll);
		L.RegFunction("CircleCast", CircleCast);
		L.RegFunction("CircleCastAll", CircleCastAll);
		L.RegFunction("CircleCastNonAlloc", CircleCastNonAlloc);
		L.RegFunction("BoxCast", BoxCast);
		L.RegFunction("BoxCastAll", BoxCastAll);
		L.RegFunction("BoxCastNonAlloc", BoxCastNonAlloc);
		L.RegFunction("CapsuleCast", CapsuleCast);
		L.RegFunction("CapsuleCastAll", CapsuleCastAll);
		L.RegFunction("CapsuleCastNonAlloc", CapsuleCastNonAlloc);
		L.RegFunction("GetRayIntersection", GetRayIntersection);
		L.RegFunction("GetRayIntersectionAll", GetRayIntersectionAll);
		L.RegFunction("GetRayIntersectionNonAlloc", GetRayIntersectionNonAlloc);
		L.RegFunction("OverlapPoint", OverlapPoint);
		L.RegFunction("OverlapPointAll", OverlapPointAll);
		L.RegFunction("OverlapPointNonAlloc", OverlapPointNonAlloc);
		L.RegFunction("OverlapCircle", OverlapCircle);
		L.RegFunction("OverlapCircleAll", OverlapCircleAll);
		L.RegFunction("OverlapCircleNonAlloc", OverlapCircleNonAlloc);
		L.RegFunction("OverlapBox", OverlapBox);
		L.RegFunction("OverlapBoxAll", OverlapBoxAll);
		L.RegFunction("OverlapBoxNonAlloc", OverlapBoxNonAlloc);
		L.RegFunction("OverlapArea", OverlapArea);
		L.RegFunction("OverlapAreaAll", OverlapAreaAll);
		L.RegFunction("OverlapAreaNonAlloc", OverlapAreaNonAlloc);
		L.RegFunction("OverlapCapsule", OverlapCapsule);
		L.RegFunction("OverlapCapsuleAll", OverlapCapsuleAll);
		L.RegFunction("OverlapCapsuleNonAlloc", OverlapCapsuleNonAlloc);
		L.RegFunction("OverlapCollider", OverlapCollider);
		L.RegFunction("GetContacts", GetContacts);
		L.RegFunction("New", _CreateUnityEngine_Physics2D);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("IgnoreRaycastLayer", 4);
		L.RegConstant("DefaultRaycastLayers", -5);
		L.RegConstant("AllLayers", -1);
		L.RegConstant("MaxPolygonShapeVertices", 8);
		L.RegVar("defaultPhysicsScene", get_defaultPhysicsScene, null);
		L.RegVar("velocityIterations", get_velocityIterations, set_velocityIterations);
		L.RegVar("positionIterations", get_positionIterations, set_positionIterations);
		L.RegVar("gravity", get_gravity, set_gravity);
		L.RegVar("queriesHitTriggers", get_queriesHitTriggers, set_queriesHitTriggers);
		L.RegVar("queriesStartInColliders", get_queriesStartInColliders, set_queriesStartInColliders);
		L.RegVar("callbacksOnDisable", get_callbacksOnDisable, set_callbacksOnDisable);
		L.RegVar("reuseCollisionCallbacks", get_reuseCollisionCallbacks, set_reuseCollisionCallbacks);
		L.RegVar("autoSyncTransforms", get_autoSyncTransforms, set_autoSyncTransforms);
		L.RegVar("simulationMode", get_simulationMode, set_simulationMode);
		L.RegVar("jobOptions", get_jobOptions, set_jobOptions);
		L.RegVar("velocityThreshold", get_velocityThreshold, set_velocityThreshold);
		L.RegVar("maxLinearCorrection", get_maxLinearCorrection, set_maxLinearCorrection);
		L.RegVar("maxAngularCorrection", get_maxAngularCorrection, set_maxAngularCorrection);
		L.RegVar("maxTranslationSpeed", get_maxTranslationSpeed, set_maxTranslationSpeed);
		L.RegVar("maxRotationSpeed", get_maxRotationSpeed, set_maxRotationSpeed);
		L.RegVar("defaultContactOffset", get_defaultContactOffset, set_defaultContactOffset);
		L.RegVar("baumgarteScale", get_baumgarteScale, set_baumgarteScale);
		L.RegVar("baumgarteTOIScale", get_baumgarteTOIScale, set_baumgarteTOIScale);
		L.RegVar("timeToSleep", get_timeToSleep, set_timeToSleep);
		L.RegVar("linearSleepTolerance", get_linearSleepTolerance, set_linearSleepTolerance);
		L.RegVar("angularSleepTolerance", get_angularSleepTolerance, set_angularSleepTolerance);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Physics2D(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.Physics2D obj = new UnityEngine.Physics2D();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Physics2D.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Simulate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			bool o = UnityEngine.Physics2D.Simulate(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncTransforms(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Physics2D.SyncTransforms();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IgnoreCollision(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				UnityEngine.Collider2D arg1 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 2);
				UnityEngine.Physics2D.IgnoreCollision(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				UnityEngine.Collider2D arg1 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.Physics2D.IgnoreCollision(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.IgnoreCollision");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIgnoreCollision(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
			UnityEngine.Collider2D arg1 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 2);
			bool o = UnityEngine.Physics2D.GetIgnoreCollision(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IgnoreLayerCollision(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Physics2D.IgnoreLayerCollision(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.Physics2D.IgnoreLayerCollision(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.IgnoreLayerCollision");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIgnoreLayerCollision(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = UnityEngine.Physics2D.GetIgnoreLayerCollision(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLayerCollisionMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.SetLayerCollisionMask(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLayerCollisionMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int o = UnityEngine.Physics2D.GetLayerCollisionMask(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsTouching(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Collider2D>(L, 2))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				UnityEngine.Collider2D arg1 = (UnityEngine.Collider2D)ToLua.ToObject(L, 2);
				bool o = UnityEngine.Physics2D.IsTouching(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D>(L, 2))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				bool o = UnityEngine.Physics2D.IsTouching(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				UnityEngine.Collider2D arg1 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.Check(L, 3);
				bool o = UnityEngine.Physics2D.IsTouching(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.IsTouching");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsTouchingLayers(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				bool o = UnityEngine.Physics2D.IsTouchingLayers(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool o = UnityEngine.Physics2D.IsTouchingLayers(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.IsTouchingLayers");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Distance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
			UnityEngine.Collider2D arg1 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 2);
			UnityEngine.ColliderDistance2D o = UnityEngine.Physics2D.Distance(arg0, arg1);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClosestPoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Collider2D>(L, 2))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Collider2D arg1 = (UnityEngine.Collider2D)ToLua.ToObject(L, 2);
				UnityEngine.Vector2 o = UnityEngine.Physics2D.ClosestPoint(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Rigidbody2D>(L, 2))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Rigidbody2D arg1 = (UnityEngine.Rigidbody2D)ToLua.ToObject(L, 2);
				UnityEngine.Vector2 o = UnityEngine.Physics2D.ClosestPoint(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.ClosestPoint");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Linecast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.Linecast(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.Linecast(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, float>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.Linecast(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.RaycastHit2D[]>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 3);
				UnityEngine.RaycastHit2D[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit2D>(L, 4);
				int o = UnityEngine.Physics2D.Linecast(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.RaycastHit2D>>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 3);
				System.Collections.Generic.List<UnityEngine.RaycastHit2D> arg3 = (System.Collections.Generic.List<UnityEngine.RaycastHit2D>)ToLua.ToObject(L, 4);
				int o = UnityEngine.Physics2D.Linecast(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.Linecast(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.Linecast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LinecastAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.LinecastAll(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.LinecastAll(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.LinecastAll(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.LinecastAll(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.LinecastAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LinecastNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] arg2 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 3);
				int o = UnityEngine.Physics2D.LinecastNonAlloc(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] arg2 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int o = UnityEngine.Physics2D.LinecastNonAlloc(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] arg2 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int o = UnityEngine.Physics2D.LinecastNonAlloc(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] arg2 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int o = UnityEngine.Physics2D.LinecastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.LinecastNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.Raycast(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.Raycast(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<float, int>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.Raycast(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.RaycastHit2D[]>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 3);
				UnityEngine.RaycastHit2D[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit2D>(L, 4);
				int o = UnityEngine.Physics2D.Raycast(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.RaycastHit2D>>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 3);
				System.Collections.Generic.List<UnityEngine.RaycastHit2D> arg3 = (System.Collections.Generic.List<UnityEngine.RaycastHit2D>)ToLua.ToObject(L, 4);
				int o = UnityEngine.Physics2D.Raycast(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<float, int, float>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.Raycast(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.RaycastHit2D[], float>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 3);
				UnityEngine.RaycastHit2D[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit2D>(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				int o = UnityEngine.Physics2D.Raycast(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.RaycastHit2D>, float>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 3);
				System.Collections.Generic.List<UnityEngine.RaycastHit2D> arg3 = (System.Collections.Generic.List<UnityEngine.RaycastHit2D>)ToLua.ToObject(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				int o = UnityEngine.Physics2D.Raycast(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.Raycast(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.Raycast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] arg2 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 3);
				int o = UnityEngine.Physics2D.RaycastNonAlloc(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] arg2 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int o = UnityEngine.Physics2D.RaycastNonAlloc(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] arg2 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int o = UnityEngine.Physics2D.RaycastNonAlloc(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] arg2 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int o = UnityEngine.Physics2D.RaycastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] arg2 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int o = UnityEngine.Physics2D.RaycastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.RaycastNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.RaycastAll(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.RaycastAll(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.RaycastAll(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.RaycastAll(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.RaycastAll(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.RaycastAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CircleCast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.CircleCast(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.CircleCast(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<float, int>(L, 4))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.CircleCast(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.RaycastHit2D[]>(L, 4))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.ContactFilter2D arg3 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 4);
				UnityEngine.RaycastHit2D[] arg4 = ToLua.ToStructArray<UnityEngine.RaycastHit2D>(L, 5);
				int o = UnityEngine.Physics2D.CircleCast(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.RaycastHit2D>>(L, 4))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.ContactFilter2D arg3 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 4);
				System.Collections.Generic.List<UnityEngine.RaycastHit2D> arg4 = (System.Collections.Generic.List<UnityEngine.RaycastHit2D>)ToLua.ToObject(L, 5);
				int o = UnityEngine.Physics2D.CircleCast(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<float, int, float>(L, 4))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.CircleCast(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.RaycastHit2D[], float>(L, 4))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.ContactFilter2D arg3 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 4);
				UnityEngine.RaycastHit2D[] arg4 = ToLua.ToStructArray<UnityEngine.RaycastHit2D>(L, 5);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
				int o = UnityEngine.Physics2D.CircleCast(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.RaycastHit2D>, float>(L, 4))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.ContactFilter2D arg3 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 4);
				System.Collections.Generic.List<UnityEngine.RaycastHit2D> arg4 = (System.Collections.Generic.List<UnityEngine.RaycastHit2D>)ToLua.ToObject(L, 5);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
				int o = UnityEngine.Physics2D.CircleCast(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.CircleCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.CircleCast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CircleCastAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.CircleCastAll(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.CircleCastAll(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.CircleCastAll(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.CircleCastAll(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.CircleCastAll(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.CircleCastAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CircleCastNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.RaycastHit2D[] arg3 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 4);
				int o = UnityEngine.Physics2D.CircleCastNonAlloc(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.RaycastHit2D[] arg3 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int o = UnityEngine.Physics2D.CircleCastNonAlloc(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.RaycastHit2D[] arg3 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int o = UnityEngine.Physics2D.CircleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.RaycastHit2D[] arg3 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int o = UnityEngine.Physics2D.CircleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
				UnityEngine.RaycastHit2D[] arg3 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
				int o = UnityEngine.Physics2D.CircleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.CircleCastNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.BoxCast(arg0, arg1, arg2, arg3);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.BoxCast(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<float, int>(L, 5))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.RaycastHit2D[]>(L, 5))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.ContactFilter2D arg4 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 5);
				UnityEngine.RaycastHit2D[] arg5 = ToLua.ToStructArray<UnityEngine.RaycastHit2D>(L, 6);
				int o = UnityEngine.Physics2D.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.RaycastHit2D>>(L, 5))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.ContactFilter2D arg4 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 5);
				System.Collections.Generic.List<UnityEngine.RaycastHit2D> arg5 = (System.Collections.Generic.List<UnityEngine.RaycastHit2D>)ToLua.ToObject(L, 6);
				int o = UnityEngine.Physics2D.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes<float, int, float>(L, 5))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
				float arg6 = (float)LuaDLL.lua_tonumber(L, 7);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.RaycastHit2D[], float>(L, 5))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.ContactFilter2D arg4 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 5);
				UnityEngine.RaycastHit2D[] arg5 = ToLua.ToStructArray<UnityEngine.RaycastHit2D>(L, 6);
				float arg6 = (float)LuaDLL.lua_tonumber(L, 7);
				int o = UnityEngine.Physics2D.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.RaycastHit2D>, float>(L, 5))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.ContactFilter2D arg4 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 5);
				System.Collections.Generic.List<UnityEngine.RaycastHit2D> arg5 = (System.Collections.Generic.List<UnityEngine.RaycastHit2D>)ToLua.ToObject(L, 6);
				float arg6 = (float)LuaDLL.lua_tonumber(L, 7);
				int o = UnityEngine.Physics2D.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.BoxCast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.BoxCastAll(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.BoxCastAll(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.BoxCastAll(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.BoxCastAll(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.BoxCastAll(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.BoxCastAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.RaycastHit2D[] arg4 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 5);
				int o = UnityEngine.Physics2D.BoxCastNonAlloc(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.RaycastHit2D[] arg4 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int o = UnityEngine.Physics2D.BoxCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.RaycastHit2D[] arg4 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				int o = UnityEngine.Physics2D.BoxCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.RaycastHit2D[] arg4 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
				int o = UnityEngine.Physics2D.BoxCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 9)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
				UnityEngine.RaycastHit2D[] arg4 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
				float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
				int o = UnityEngine.Physics2D.BoxCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.BoxCastNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.CapsuleCast(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.CapsuleCast(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes<float, int>(L, 6))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
				int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.CapsuleCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.RaycastHit2D[]>(L, 6))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.ContactFilter2D arg5 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 6);
				UnityEngine.RaycastHit2D[] arg6 = ToLua.ToStructArray<UnityEngine.RaycastHit2D>(L, 7);
				int o = UnityEngine.Physics2D.CapsuleCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.RaycastHit2D>>(L, 6))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.ContactFilter2D arg5 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 6);
				System.Collections.Generic.List<UnityEngine.RaycastHit2D> arg6 = (System.Collections.Generic.List<UnityEngine.RaycastHit2D>)ToLua.ToObject(L, 7);
				int o = UnityEngine.Physics2D.CapsuleCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 8 && TypeChecker.CheckTypes<float, int, float>(L, 6))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
				int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
				float arg7 = (float)LuaDLL.lua_tonumber(L, 8);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.CapsuleCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 8 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.RaycastHit2D[], float>(L, 6))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.ContactFilter2D arg5 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 6);
				UnityEngine.RaycastHit2D[] arg6 = ToLua.ToStructArray<UnityEngine.RaycastHit2D>(L, 7);
				float arg7 = (float)LuaDLL.lua_tonumber(L, 8);
				int o = UnityEngine.Physics2D.CapsuleCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 8 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.RaycastHit2D>, float>(L, 6))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.ContactFilter2D arg5 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 6);
				System.Collections.Generic.List<UnityEngine.RaycastHit2D> arg6 = (System.Collections.Generic.List<UnityEngine.RaycastHit2D>)ToLua.ToObject(L, 7);
				float arg7 = (float)LuaDLL.lua_tonumber(L, 8);
				int o = UnityEngine.Physics2D.CapsuleCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 9)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
				float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.CapsuleCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.CapsuleCast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.CapsuleCastAll(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.CapsuleCastAll(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.CapsuleCastAll(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.CapsuleCastAll(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 9)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
				float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.CapsuleCastAll(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.CapsuleCastAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.RaycastHit2D[] arg5 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 6);
				int o = UnityEngine.Physics2D.CapsuleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.RaycastHit2D[] arg5 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int o = UnityEngine.Physics2D.CapsuleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.RaycastHit2D[] arg5 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				int o = UnityEngine.Physics2D.CapsuleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 9)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.RaycastHit2D[] arg5 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
				int o = UnityEngine.Physics2D.CapsuleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 10)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Vector2 arg4 = ToLua.ToVector2(L, 5);
				UnityEngine.RaycastHit2D[] arg5 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
				float arg8 = (float)LuaDLL.luaL_checknumber(L, 9);
				float arg9 = (float)LuaDLL.luaL_checknumber(L, 10);
				int o = UnityEngine.Physics2D.CapsuleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.CapsuleCastNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRayIntersection(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.GetRayIntersection(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.GetRayIntersection(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.RaycastHit2D o = UnityEngine.Physics2D.GetRayIntersection(arg0, arg1, arg2);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.GetRayIntersection");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRayIntersectionAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.GetRayIntersectionAll(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.GetRayIntersectionAll(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.RaycastHit2D[] o = UnityEngine.Physics2D.GetRayIntersectionAll(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.GetRayIntersectionAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRayIntersectionNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
				UnityEngine.RaycastHit2D[] arg1 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 2);
				int o = UnityEngine.Physics2D.GetRayIntersectionNonAlloc(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
				UnityEngine.RaycastHit2D[] arg1 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int o = UnityEngine.Physics2D.GetRayIntersectionNonAlloc(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
				UnityEngine.RaycastHit2D[] arg1 = ToLua.CheckStructArray<UnityEngine.RaycastHit2D>(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int o = UnityEngine.Physics2D.GetRayIntersectionNonAlloc(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.GetRayIntersectionNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapPoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapPoint(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapPoint(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapPoint(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.Collider2D[]>(L, 2))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider2D>(L, 3);
				int o = UnityEngine.Physics2D.OverlapPoint(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.Collider2D>>(L, 2))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				System.Collections.Generic.List<UnityEngine.Collider2D> arg2 = (System.Collections.Generic.List<UnityEngine.Collider2D>)ToLua.ToObject(L, 3);
				int o = UnityEngine.Physics2D.OverlapPoint(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapPoint(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapPoint");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapPointAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapPointAll(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapPointAll(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapPointAll(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapPointAll(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapPointAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapPointNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Collider2D[] arg1 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 2);
				int o = UnityEngine.Physics2D.OverlapPointNonAlloc(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Collider2D[] arg1 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int o = UnityEngine.Physics2D.OverlapPointNonAlloc(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Collider2D[] arg1 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int o = UnityEngine.Physics2D.OverlapPointNonAlloc(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Collider2D[] arg1 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int o = UnityEngine.Physics2D.OverlapPointNonAlloc(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapPointNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCircle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapCircle(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapCircle(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, float>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapCircle(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.Collider2D[]>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 3);
				UnityEngine.Collider2D[] arg3 = ToLua.ToObjectArray<UnityEngine.Collider2D>(L, 4);
				int o = UnityEngine.Physics2D.OverlapCircle(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.Collider2D>>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 3);
				System.Collections.Generic.List<UnityEngine.Collider2D> arg3 = (System.Collections.Generic.List<UnityEngine.Collider2D>)ToLua.ToObject(L, 4);
				int o = UnityEngine.Physics2D.OverlapCircle(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapCircle(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapCircle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCircleAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapCircleAll(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapCircleAll(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapCircleAll(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapCircleAll(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapCircleAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCircleNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 3);
				int o = UnityEngine.Physics2D.OverlapCircleNonAlloc(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int o = UnityEngine.Physics2D.OverlapCircleNonAlloc(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int o = UnityEngine.Physics2D.OverlapCircleNonAlloc(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int o = UnityEngine.Physics2D.OverlapCircleNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapCircleNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBox(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapBox(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapBox(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<int, float>(L, 4))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapBox(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.Collider2D[]>(L, 4))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.ContactFilter2D arg3 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 4);
				UnityEngine.Collider2D[] arg4 = ToLua.ToObjectArray<UnityEngine.Collider2D>(L, 5);
				int o = UnityEngine.Physics2D.OverlapBox(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.Collider2D>>(L, 4))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.ContactFilter2D arg3 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 4);
				System.Collections.Generic.List<UnityEngine.Collider2D> arg4 = (System.Collections.Generic.List<UnityEngine.Collider2D>)ToLua.ToObject(L, 5);
				int o = UnityEngine.Physics2D.OverlapBox(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapBox(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapBox");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBoxAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapBoxAll(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapBoxAll(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapBoxAll(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapBoxAll(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapBoxAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBoxNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D[] arg3 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 4);
				int o = UnityEngine.Physics2D.OverlapBoxNonAlloc(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D[] arg3 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int o = UnityEngine.Physics2D.OverlapBoxNonAlloc(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D[] arg3 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int o = UnityEngine.Physics2D.OverlapBoxNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D[] arg3 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int o = UnityEngine.Physics2D.OverlapBoxNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapBoxNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapArea(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapArea(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapArea(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, float>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapArea(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.Collider2D[]>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 3);
				UnityEngine.Collider2D[] arg3 = ToLua.ToObjectArray<UnityEngine.Collider2D>(L, 4);
				int o = UnityEngine.Physics2D.OverlapArea(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.Collider2D>>(L, 3))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 3);
				System.Collections.Generic.List<UnityEngine.Collider2D> arg3 = (System.Collections.Generic.List<UnityEngine.Collider2D>)ToLua.ToObject(L, 4);
				int o = UnityEngine.Physics2D.OverlapArea(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapArea(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapArea");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapAreaAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapAreaAll(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapAreaAll(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapAreaAll(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapAreaAll(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapAreaAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapAreaNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 3);
				int o = UnityEngine.Physics2D.OverlapAreaNonAlloc(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int o = UnityEngine.Physics2D.OverlapAreaNonAlloc(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				int o = UnityEngine.Physics2D.OverlapAreaNonAlloc(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				int o = UnityEngine.Physics2D.OverlapAreaNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapAreaNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsule(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapCapsule(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapCapsule(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<int, float>(L, 5))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapCapsule(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, UnityEngine.Collider2D[]>(L, 5))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.ContactFilter2D arg4 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 5);
				UnityEngine.Collider2D[] arg5 = ToLua.ToObjectArray<UnityEngine.Collider2D>(L, 6);
				int o = UnityEngine.Physics2D.OverlapCapsule(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.Collider2D>>(L, 5))
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.ContactFilter2D arg4 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 5);
				System.Collections.Generic.List<UnityEngine.Collider2D> arg5 = (System.Collections.Generic.List<UnityEngine.Collider2D>)ToLua.ToObject(L, 6);
				int o = UnityEngine.Physics2D.OverlapCapsule(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				UnityEngine.Collider2D o = UnityEngine.Physics2D.OverlapCapsule(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapCapsule");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsuleAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapCapsuleAll(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapCapsuleAll(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapCapsuleAll(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				UnityEngine.Collider2D[] o = UnityEngine.Physics2D.OverlapCapsuleAll(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapCapsuleAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsuleNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D[] arg4 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 5);
				int o = UnityEngine.Physics2D.OverlapCapsuleNonAlloc(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D[] arg4 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int o = UnityEngine.Physics2D.OverlapCapsuleNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D[] arg4 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				int o = UnityEngine.Physics2D.OverlapCapsuleNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 8)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
				UnityEngine.CapsuleDirection2D arg2 = (UnityEngine.CapsuleDirection2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.CapsuleDirection2D));
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Collider2D[] arg4 = ToLua.CheckObjectArray<UnityEngine.Collider2D>(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				float arg6 = (float)LuaDLL.luaL_checknumber(L, 7);
				float arg7 = (float)LuaDLL.luaL_checknumber(L, 8);
				int o = UnityEngine.Physics2D.OverlapCapsuleNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapCapsuleNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCollider(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Collider2D[]>(L, 3))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.Check(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider2D>(L, 3);
				int o = UnityEngine.Physics2D.OverlapCollider(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.Collider2D>>(L, 3))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.Check(L, 2);
				System.Collections.Generic.List<UnityEngine.Collider2D> arg2 = (System.Collections.Generic.List<UnityEngine.Collider2D>)ToLua.ToObject(L, 3);
				int o = UnityEngine.Physics2D.OverlapCollider(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.OverlapCollider");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetContacts(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Collider2D, UnityEngine.ContactPoint2D[]>(L, 1))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.ToObject(L, 1);
				UnityEngine.ContactPoint2D[] arg1 = ToLua.ToStructArray<UnityEngine.ContactPoint2D>(L, 2);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Collider2D, UnityEngine.Collider2D[]>(L, 1))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.ToObject(L, 1);
				UnityEngine.Collider2D[] arg1 = ToLua.ToObjectArray<UnityEngine.Collider2D>(L, 2);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Rigidbody2D, System.Collections.Generic.List<UnityEngine.ContactPoint2D>>(L, 1))
			{
				UnityEngine.Rigidbody2D arg0 = (UnityEngine.Rigidbody2D)ToLua.ToObject(L, 1);
				System.Collections.Generic.List<UnityEngine.ContactPoint2D> arg1 = (System.Collections.Generic.List<UnityEngine.ContactPoint2D>)ToLua.ToObject(L, 2);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Rigidbody2D, UnityEngine.ContactPoint2D[]>(L, 1))
			{
				UnityEngine.Rigidbody2D arg0 = (UnityEngine.Rigidbody2D)ToLua.ToObject(L, 1);
				UnityEngine.ContactPoint2D[] arg1 = ToLua.ToStructArray<UnityEngine.ContactPoint2D>(L, 2);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Rigidbody2D, UnityEngine.Collider2D[]>(L, 1))
			{
				UnityEngine.Rigidbody2D arg0 = (UnityEngine.Rigidbody2D)ToLua.ToObject(L, 1);
				UnityEngine.Collider2D[] arg1 = ToLua.ToObjectArray<UnityEngine.Collider2D>(L, 2);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Rigidbody2D, System.Collections.Generic.List<UnityEngine.Collider2D>>(L, 1))
			{
				UnityEngine.Rigidbody2D arg0 = (UnityEngine.Rigidbody2D)ToLua.ToObject(L, 1);
				System.Collections.Generic.List<UnityEngine.Collider2D> arg1 = (System.Collections.Generic.List<UnityEngine.Collider2D>)ToLua.ToObject(L, 2);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Collider2D, System.Collections.Generic.List<UnityEngine.Collider2D>>(L, 1))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.ToObject(L, 1);
				System.Collections.Generic.List<UnityEngine.Collider2D> arg1 = (System.Collections.Generic.List<UnityEngine.Collider2D>)ToLua.ToObject(L, 2);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Collider2D, System.Collections.Generic.List<UnityEngine.ContactPoint2D>>(L, 1))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.ToObject(L, 1);
				System.Collections.Generic.List<UnityEngine.ContactPoint2D> arg1 = (System.Collections.Generic.List<UnityEngine.ContactPoint2D>)ToLua.ToObject(L, 2);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Rigidbody2D, UnityEngine.ContactFilter2D, UnityEngine.Collider2D[]>(L, 1))
			{
				UnityEngine.Rigidbody2D arg0 = (UnityEngine.Rigidbody2D)ToLua.ToObject(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider2D>(L, 3);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Rigidbody2D, UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.ContactPoint2D>>(L, 1))
			{
				UnityEngine.Rigidbody2D arg0 = (UnityEngine.Rigidbody2D)ToLua.ToObject(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				System.Collections.Generic.List<UnityEngine.ContactPoint2D> arg2 = (System.Collections.Generic.List<UnityEngine.ContactPoint2D>)ToLua.ToObject(L, 3);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Collider2D, UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.Collider2D>>(L, 1))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.ToObject(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				System.Collections.Generic.List<UnityEngine.Collider2D> arg2 = (System.Collections.Generic.List<UnityEngine.Collider2D>)ToLua.ToObject(L, 3);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Rigidbody2D, UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.Collider2D>>(L, 1))
			{
				UnityEngine.Rigidbody2D arg0 = (UnityEngine.Rigidbody2D)ToLua.ToObject(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				System.Collections.Generic.List<UnityEngine.Collider2D> arg2 = (System.Collections.Generic.List<UnityEngine.Collider2D>)ToLua.ToObject(L, 3);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Rigidbody2D, UnityEngine.ContactFilter2D, UnityEngine.ContactPoint2D[]>(L, 1))
			{
				UnityEngine.Rigidbody2D arg0 = (UnityEngine.Rigidbody2D)ToLua.ToObject(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				UnityEngine.ContactPoint2D[] arg2 = ToLua.ToStructArray<UnityEngine.ContactPoint2D>(L, 3);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Collider2D, UnityEngine.ContactFilter2D, UnityEngine.Collider2D[]>(L, 1))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.ToObject(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				UnityEngine.Collider2D[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider2D>(L, 3);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Collider2D, UnityEngine.ContactFilter2D, UnityEngine.ContactPoint2D[]>(L, 1))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.ToObject(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				UnityEngine.ContactPoint2D[] arg2 = ToLua.ToStructArray<UnityEngine.ContactPoint2D>(L, 3);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Collider2D, UnityEngine.ContactFilter2D, System.Collections.Generic.List<UnityEngine.ContactPoint2D>>(L, 1))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.ToObject(L, 1);
				UnityEngine.ContactFilter2D arg1 = StackTraits<UnityEngine.ContactFilter2D>.To(L, 2);
				System.Collections.Generic.List<UnityEngine.ContactPoint2D> arg2 = (System.Collections.Generic.List<UnityEngine.ContactPoint2D>)ToLua.ToObject(L, 3);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Collections.Generic.List<UnityEngine.ContactPoint2D>>(L, 4))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				UnityEngine.Collider2D arg1 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.Check(L, 3);
				System.Collections.Generic.List<UnityEngine.ContactPoint2D> arg3 = (System.Collections.Generic.List<UnityEngine.ContactPoint2D>)ToLua.ToObject(L, 4);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.ContactPoint2D[]>(L, 4))
			{
				UnityEngine.Collider2D arg0 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 1);
				UnityEngine.Collider2D arg1 = (UnityEngine.Collider2D)ToLua.CheckObject<UnityEngine.Collider2D>(L, 2);
				UnityEngine.ContactFilter2D arg2 = StackTraits<UnityEngine.ContactFilter2D>.Check(L, 3);
				UnityEngine.ContactPoint2D[] arg3 = ToLua.ToStructArray<UnityEngine.ContactPoint2D>(L, 4);
				int o = UnityEngine.Physics2D.GetContacts(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics2D.GetContacts");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultPhysicsScene(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, UnityEngine.Physics2D.defaultPhysicsScene);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_velocityIterations(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.Physics2D.velocityIterations);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_positionIterations(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.Physics2D.positionIterations);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gravity(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.Physics2D.gravity);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_queriesHitTriggers(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Physics2D.queriesHitTriggers);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_queriesStartInColliders(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Physics2D.queriesStartInColliders);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_callbacksOnDisable(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Physics2D.callbacksOnDisable);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_reuseCollisionCallbacks(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Physics2D.reuseCollisionCallbacks);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_autoSyncTransforms(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Physics2D.autoSyncTransforms);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_simulationMode(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.Physics2D.simulationMode);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_jobOptions(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, UnityEngine.Physics2D.jobOptions);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_velocityThreshold(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.velocityThreshold);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxLinearCorrection(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.maxLinearCorrection);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxAngularCorrection(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.maxAngularCorrection);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxTranslationSpeed(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.maxTranslationSpeed);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxRotationSpeed(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.maxRotationSpeed);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultContactOffset(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.defaultContactOffset);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_baumgarteScale(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.baumgarteScale);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_baumgarteTOIScale(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.baumgarteTOIScale);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_timeToSleep(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.timeToSleep);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_linearSleepTolerance(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.linearSleepTolerance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_angularSleepTolerance(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics2D.angularSleepTolerance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_velocityIterations(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.velocityIterations = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_positionIterations(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.positionIterations = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gravity(IntPtr L)
	{
		try
		{
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			UnityEngine.Physics2D.gravity = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_queriesHitTriggers(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Physics2D.queriesHitTriggers = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_queriesStartInColliders(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Physics2D.queriesStartInColliders = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_callbacksOnDisable(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Physics2D.callbacksOnDisable = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_reuseCollisionCallbacks(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Physics2D.reuseCollisionCallbacks = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_autoSyncTransforms(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Physics2D.autoSyncTransforms = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_simulationMode(IntPtr L)
	{
		try
		{
			UnityEngine.SimulationMode2D arg0 = (UnityEngine.SimulationMode2D)ToLua.CheckObject(L, 2, typeof(UnityEngine.SimulationMode2D));
			UnityEngine.Physics2D.simulationMode = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_jobOptions(IntPtr L)
	{
		try
		{
			UnityEngine.PhysicsJobOptions2D arg0 = StackTraits<UnityEngine.PhysicsJobOptions2D>.Check(L, 2);
			UnityEngine.Physics2D.jobOptions = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_velocityThreshold(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.velocityThreshold = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxLinearCorrection(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.maxLinearCorrection = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxAngularCorrection(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.maxAngularCorrection = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxTranslationSpeed(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.maxTranslationSpeed = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxRotationSpeed(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.maxRotationSpeed = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultContactOffset(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.defaultContactOffset = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_baumgarteScale(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.baumgarteScale = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_baumgarteTOIScale(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.baumgarteTOIScale = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_timeToSleep(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.timeToSleep = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_linearSleepTolerance(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.linearSleepTolerance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_angularSleepTolerance(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics2D.angularSleepTolerance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

